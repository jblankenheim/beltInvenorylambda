const AWS = require('aws-sdk');
const dynamodb = new AWS.DynamoDB.DocumentClient();
const beltInventoryTableName = 'BeltInventory';

const insertEvent = async (newImage) => {
    try {
        const driveBeltSize = newImage.driveBeltSize.S;
        const locationID = newImage.locationID.S;
        const name = newImage.name.S;
        const numberOfDriveBelts = parseInt(newImage.numberOfDriveBelts.N, 10);
        const locationName = newImage.locationName.S;

        const beltInventoryParams = {
            TableName: beltInventoryTableName,
            Key: {
                'beltSize': driveBeltSize,
                'locationID': locationID
            }
        };

        const beltInventory = await dynamodb.get(beltInventoryParams).promise();

        if (!beltInventory.Item) {
            // Insert Scenario
            await dynamodb.put({
                TableName: beltInventoryTableName,
                Item: {
                    'beltSize': driveBeltSize,
                    'locationID': locationID,
                    'locationName': locationName,
                    'equipmentUsedOn': [name],
                    'numberOfDriveBelts': numberOfDriveBelts
                }
            }).promise();
        } else {
            // Update Scenario
            const { equipmentUsedOn, numberOfDriveBelts: existingNumberOfDriveBelts } = beltInventory.Item;

            // Prepare the update expression and values
            const updatedNumberOfDriveBelts = existingNumberOfDriveBelts + numberOfDriveBelts;

            // Use list_append to append to the equipmentUsedOn list
            await dynamodb.update({
                TableName: beltInventoryTableName,
                Key: {
                    'beltSize': driveBeltSize,
                    'locationID': locationID
                },
                UpdateExpression: 'SET numberOfDriveBelts = :numberOfDriveBelts, equipmentUsedOn = list_append(equipmentUsedOn, :newEquipmentUsedOn)',
                ExpressionAttributeValues: {
                    ':numberOfDriveBelts': updatedNumberOfDriveBelts,
                    ':newEquipmentUsedOn': [name] 
                }
            }).promise();
        }
    } catch (err) {
        console.error('Error processing INSERT event:', err);
    }
};

const removeEvent = async (oldImage) => {
    try {
        const driveBeltSize = oldImage.driveBeltSize.S;
        const locationID = oldImage.locationID.S;
        const nameToRemove = oldImage.name.S;
        const numberOfDriveBeltsToRemove = oldImage.numberOfDriveBelts.N ? parseInt(oldImage.numberOfDriveBelts.N, 10) : 0;

        const beltInventoryParams = {
            TableName: beltInventoryTableName,
            Key: {
                'beltSize': driveBeltSize,
                'locationID': locationID
            }
        };

        const beltInventory = await dynamodb.get(beltInventoryParams).promise();

        if (beltInventory.Item) {
            let { equipmentUsedOn, numberOfDriveBelts } = beltInventory.Item;

            
            const updatedEquipmentUsedOn = equipmentUsedOn.filter(e => e !== nameToRemove);

            const updatedNumberOfDriveBelts = numberOfDriveBelts - numberOfDriveBeltsToRemove;

            // Make sure we are not setting the number of drive belts to a negative value
            const finalNumberOfDriveBelts = Math.max(updatedNumberOfDriveBelts, 0);

         
            await dynamodb.update({
                TableName: beltInventoryTableName,
                Key: {
                    'beltSize': driveBeltSize,
                    'locationID': locationID
                },
                UpdateExpression: 'SET equipmentUsedOn = :equipmentUsedOn, numberOfDriveBelts = :numberOfDriveBelts',
                ExpressionAttributeValues: {
                    ':equipmentUsedOn': updatedEquipmentUsedOn,  
                    ':numberOfDriveBelts': finalNumberOfDriveBelts
                }
            }).promise();
        } else {
            console.warn(`No item found with beltSize: ${driveBeltSize} and locationID: ${locationID}`);
        }
    } catch (err) {
        console.error('Error processing REMOVE event:', err);
    }
};

exports.handler = async (event) => {
    for (const record of event.Records) {
        const eventName = record.eventName;

        if (eventName === 'INSERT') {
            const newImage = record.dynamodb.NewImage;
            if (newImage) {
                await insertEvent(newImage);
            } else {
                console.error('Missing NewImage in INSERT event');
            }
        }

        if (eventName === 'REMOVE') {
            const oldImage = record.dynamodb.OldImage;
            if (oldImage) {
                await removeEvent(oldImage);
            } else {
                console.error('Missing OldImage in REMOVE event');
            }
        }

        if (eventName === 'MODIFY') {
            const oldImage = record.dynamodb.OldImage;
            const newImage = record.dynamodb.NewImage;
            if (oldImage && newImage) {
                await removeEvent(oldImage);
                await insertEvent(newImage);
            } else {
                console.error('Missing OldImage or NewImage in MODIFY event');
            }
        }
    }
};
